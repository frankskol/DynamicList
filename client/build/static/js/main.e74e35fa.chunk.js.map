{"version":3,"sources":["components/Login.js","components/location.js","components/Map.js","components/DynamicList.js","components/Interface.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleChange","event","setState","username","target","value","error","handleSubmit","preventDefault","state","lng","lat","axios","get","then","resp","data","length","post","longitude","latitude","status","response","window","location","console","log","catch","localStorage","setItem","this","navigator","geolocation","getCurrentPosition","pos","coords","className","type","name","onChange","onClick","React","Component","mapStyles","position","width","height","CurrentLocation","panLat","panLng","currentLocation","centerAroundCurrentLocation","loadMap","prevProps","prevState","google","recenterMap","users","renderChildren","maps","mapRef","refs","map","node","ReactDOM","findDOMNode","zoom","current","center","LatLng","mapConfig","Object","assign","Map","panTo","children","Children","c","cloneElement","mapCenter","style","ref","defaultProps","initialCenter","visible","icons","icon","MapContainer","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","onClose","displayMarkers","user","index","key","displayStatus","displayLocation","GoogleApiWrapper","apiKey","DynamicList","distance","lat1","lon1","lat2","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","renderOnlineChildren","filter","sort","a","b","toFixed","transitionTime","onOpen","sendCoordinates","trigger","renderOfflineChildren","localeCompare","Interface","currentUser","getItem","currentLat","currentLng","handleLogout","clear","handleDelete","delete","doSomethingBeforeUnload","setupBeforeUnloadListener","addEventListener","ev","getCoordinates","bind","interval","setInterval","JSON","stringify","clearInterval","margin","App","path","exact","component","Boolean","hostname","match","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e74e35fa.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport axios from 'axios'\n\nexport class Login extends React.Component {\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {lng: 0, lat: 0, username: '', error: ''}\n\t}\n\t\n\t//Asks for location on mount\n\tcomponentDidMount() {\n\t\tif (this.state.lng == 0 || this.state.lat == 0){\n\t\t\tif (navigator && navigator.geolocation) {\n\t\t\t\tnavigator.geolocation.getCurrentPosition(pos => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tlat: pos.coords.latitude,\n\t\t\t\t\t\tlng: pos.coords.longitude\n\t\t\t\t\t});\n                });\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t//Catches text being typed in the form\n    handleChange = event => {\n        this.setState({ username: event.target.value, error: '' });\n    };\n\n\t//Catches submit button click\n    handleSubmit = event => {\n        event.preventDefault();\n\t\t\n\t\t//Error if username not defined\n        if (this.state.username === '') {\n            this.setState({\n                error: 'Please enter username'\n            })\n        }\n\t\t\n\t\t//Error if geolocation not allowed\n\t\telse if (this.state.lng == 0 || this.state.lat == 0){\n\t\t\tthis.setState({\n                error: 'Allow Geolocation and try again.'\n            })\n\t\t}\n\t\t\n\t\t//Proceeds with the request\n        else {\n\t\t\t\n\t\t\t//Performs a get with the current username\n\t\t\taxios.get('http://localhost:3000/user/' + this.state.username).then(resp => {\n\t\t\t\t\n\t\t\t\t//If no user exists, inserts the user\n\t\t\t\tif ((resp.data.length || []).length === 0){\n\t\t\t\t\taxios.post('http://localhost:3000/user/add/', {\n\t\t\t\t\tusername: this.state.username,\n\t\t\t\t\tlongitude: this.state.lng,\n\t\t\t\t\tlatitude: this.state.lat,\n\t\t\t\t\tstatus: '1'\n\t\t\t\t  })\n\t\t\t\t  .then(function (response) {  \n\t\t\t\t\tif(response.data == 'Insert successful'){\n\t\t\t\t\t\twindow.location = '/map';\n\t\t\t\t\t\tconsole.log('success');\n\t\t\t\t\t}\n\t\t\t\t\tif(response.data == 'Insert failed'){\n\t\t\t\t\t\tthrow \"Username already exists\";\n\t\t\t\t\t}\n\t\t\t\t  })\n\t\t\t\t  .catch(error => { console.log(error); this.setState({ error: 'Database connection failed' }) })\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//If a user exists, updates the location and sets status to online\n\t\t\t\telse{\n\t\t\t\t\taxios.post('http://localhost:3000/user/update/', {\n\t\t\t\t\tusername: this.state.username,\n\t\t\t\t\tlongitude: this.state.lng,\n\t\t\t\t\tlatitude: this.state.lat,\n\t\t\t\t\tstatus: '1'\n\t\t\t\t  }).then(function (response) {  \n\t\t\t\t\t\tif(response.data == 'Update successful'){\n\t\t\t\t\t\t\twindow.location = '/map';\n\t\t\t\t\t\t\tconsole.log('success');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(response.data == 'Update failed'){\n\t\t\t\t\t\t\tthrow \"Update failed\";\n\t\t\t\t\t\t}\n\t\t\t\t  }).catch(error => { console.log(error); this.setState({ error: 'Database connection failed' }) })\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t//Local Storage used for Interface to retrieve data\n\t\t\tlocalStorage.setItem('user', this.state.username);\n\t\t\tlocalStorage.setItem('lat', this.state.lng);\n\t\t\tlocalStorage.setItem('lng', this.state.lat);\n        }\n    }\n    render() {\n        return (\n            <div className=\"base\">\n                <h1 className='head'>Log In</h1>\n                <form className='form'>\n                    <p className='head'>Enter username to continue</p>\n                    <input className='input' value={this.state.username} type=\"text\" name=\"name\" onChange={this.handleChange} />\n                    {\n                        this.state.error === '' ? null : <div className='error'>{this.state.error}</div>\n                    }\n                    <button className='button' type=\"submit\" onClick={this.handleSubmit}> Login</button>\n                </form>\n            </div >\n        );\n    }\n}\n\nexport default Login\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n    map: {\n        position: 'absolute',\n        width: '100%',\n        height: '90%'\n    }\n};\nexport class CurrentLocation extends React.Component {\n    constructor(props) {\n        super(props);\n\n\t\tconst lat = this.props.panLat;\n\t\tconst lng = this.props.panLng;\n        this.state = {\n            currentLocation: {\n                lat: lat,\n                lng: lng\n            }\n        };\n    }\n\t\n\t//Centers arround current location if centerAroundCurrentLocation == true and proceeds to load map\n    componentDidMount() {\n        if (this.props.centerAroundCurrentLocation) {\n            if (navigator && navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(pos => {\n                    const coords = pos.coords;\n                    this.setState({\n                        currentLocation: {\n                            lat: coords.latitude,\n                            lng: coords.longitude\n                        }\n                    });\n                });\n            }\n        }\n        this.loadMap();\n    }\n\n\t//Checks on state and prop updates, takes actions accordingly\n    componentDidUpdate(prevProps, prevState) {\n\t\t\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n\t\tif (prevProps.panLat !== this.props.panLat || prevProps.panLng !== this.props.panLng) {\n            this.recenterMap();\n        }\n\t\tif (prevProps.users != this.props.users) {\n\t\t\tthis.renderChildren();\n\t\t}\n    }\n\n\t//Creates a new Map object\n    loadMap() {\n        if (this.props && this.props.google) {\n            // checks if google is available\n            const { google } = this.props;\n            const maps = google.maps;\n\n            const mapRef = this.refs.map;\n\n            // reference to the actual DOM element\n            const node = ReactDOM.findDOMNode(mapRef);\n\n            let { zoom } = this.props;\n\t\t\tconst current = this.state.currentLocation;\n            const center = new maps.LatLng(current.lat, current.lng);\n            const mapConfig = Object.assign(\n                {},\n                {\n                    center: center,\n                    zoom: zoom\n                }\n            );\n            // maps.Map() is constructor that instantiates the map\n            this.map = new maps.Map(node, mapConfig);\n        }\n    }\n\n\t//Recenters an existing map object\n    recenterMap() {\n        const map = this.map;\n        const current = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n            let center = new maps.LatLng(this.props.panLat, this.props.panLng);\n            map.panTo(center);\n        }\n    }\n    \n\t//Renders map\n    renderChildren() {\n        const { children } = this.props;\n\n        if (!children) return;\n\n\n        return React.Children.map(children, c => {\n            if (!c) return;\n            return React.cloneElement(c, {\n                map: this.map,\n                google: this.props.google,\n                mapCenter: this.state.currentLocation\n            });\n        });\n    }\n\n    render() {\n        const style = Object.assign({}, mapStyles.map);\n\n        return (\n            <div>\n                <div style={style} ref=\"map\">\n                    Loading map...\n                </div>\n                {this.renderChildren()}\n            </div>\n        );\n    }\n}\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n        lat: 48.305862,\n        lng: 14.286444\n    },\n    centerAroundCurrentLocation: true,\n    visible: true\n};\n","import React, { Component } from 'react';\r\nimport { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\r\n\r\nimport CurrentLocation from './location';\r\n\r\nvar iconBase = '/icons/';\r\n\r\nvar icons = {\r\n        online: {\r\n\t\t\ticon: 'IconOnline.png'\r\n        },\r\n\t\toffline: {\r\n\t\t\ticon: 'IconOffline.png'\r\n        },\r\n\r\n\r\n};\r\n\r\nexport class MapContainer extends Component {\r\n\t\r\n\tconstructor(props) {\r\n        super(props);\r\n    }\r\n    state = {\r\n        showingInfoWindow: false,\r\n        activeMarker: {},\r\n        selectedPlace: {}\r\n    };\r\n\t\r\n\t//Shows info window when clicking on marker\r\n    onMarkerClick = (props, marker, e) => {\r\n        this.setState({\r\n            selectedPlace: props,\r\n            activeMarker: marker,\r\n            showingInfoWindow: true\r\n        });\r\n\t}\r\n\r\n\t//Closes the info window\r\n    onClose = props => {\r\n        if (this.state.showingInfoWindow) {\r\n            this.setState({\r\n                showingInfoWindow: false,\r\n                activeMarker: null\r\n            });\r\n        }\r\n    };\r\n\t\r\n\t//Renders all markers passed down from Interface\r\n\tdisplayMarkers = () => {\r\n\t\treturn this.props.users.map((user, index) => {\r\n\t\t\tif (user.status == 1){\r\n\t\t\t\treturn <Marker onClick={this.onMarkerClick} key={index} icon={icons.online.icon} name={user.username} status={user.status} position={{\r\n\t\t\t\t   lat: user.latitude,\r\n\t\t\t\t   lng: user.longitude\r\n\t\t\t\t}} />\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn <Marker onClick={this.onMarkerClick} key={index} icon={icons.offline.icon} name={user.username} status={user.status} position={{\r\n\t\t\t\t   lat: user.latitude,\r\n\t\t\t\t   lng: user.longitude\r\n\t\t\t\t}} />\t\t\t\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n\t\r\n\t//Displays status in the info window as On- or Offline instead of 1 or 0\r\n\tdisplayStatus = () => {\r\n\t\tif (this.state.selectedPlace.status == 1) return \"Online\";\r\n\t\telse return \"Offline\";\r\n\t}\r\n\t\r\n\t//Displays marker coordinates in the info window\r\n\tdisplayLocation = () => {\r\n\t\tif (this.state.selectedPlace.position) {\r\n\t\treturn <div>\r\n\t\t<h6>Location</h6>\r\n\t\t<p>Latitude: {this.state.selectedPlace.position.lat}</p>\r\n\t\t<p>Longitude: {this.state.selectedPlace.position.lng}</p>\r\n\t\t</div>\r\n\t\t}\r\n\t}\r\n\t\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n\t\t\t\t\r\n\t\t\t\t//PanLat and PanLng are passed down to the location component\r\n                <CurrentLocation centerAroundCurrentLocation panLat={this.props.panLat} panLng={this.props.panLng} users={this.props.users} google={this.props.google}>\r\n\t\t\t\t\t{this.displayMarkers()}\r\n\t\t\t\t\t{console.log(icons.online)}\r\n                    <InfoWindow\r\n                        marker={this.state.activeMarker}\r\n                        visible={this.state.showingInfoWindow}\r\n                        onClose={this.onClose}\r\n                    >\r\n                        <div>\r\n                            <h5>{this.state.selectedPlace.name}</h5>\r\n\t\t\t\t\t\t\t\t{this.displayLocation()}\r\n\t\t\t\t\t\t\t<p>Status:  {this.displayStatus()}</p>\r\n                        </div>\r\n                    </InfoWindow>\r\n                </CurrentLocation>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: 'API_KEY'\r\n})(MapContainer);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport FlipMove from 'react-flip-move'; //Takes care of transitions\r\nimport Collapsible from 'react-collapsible';\r\n\r\nexport default class DynamicList extends React.Component {\r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n    }\r\n\t\r\n\t//Formula for calculating distance between two coordinates\r\n\tdistance = (lat1, lon1, lat2, lon2, unit) => {\r\n\t\tif ((lat1 == lat2) && (lon1 == lon2)) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar radlat1 = Math.PI * lat1/180;\r\n\t\t\tvar radlat2 = Math.PI * lat2/180;\r\n\t\t\tvar theta = lon1-lon2;\r\n\t\t\tvar radtheta = Math.PI * theta/180;\r\n\t\t\tvar dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n\t\t\tif (dist > 1) {\r\n\t\t\t\tdist = 1;\r\n\t\t\t}\r\n\t\t\tdist = Math.acos(dist);\r\n\t\t\tdist = dist * 180/Math.PI;\r\n\t\t\tdist = dist * 60 * 1.1515;\r\n\t\t\tif (unit==\"K\") { dist = dist * 1.609344 }\r\n\t\t\tif (unit==\"N\") { dist = dist * 0.8684 }\r\n\t\t\treturn dist;\r\n\t\t}\r\n\t}\r\n\t\r\n\t//Clickable list implemented as collapsible for the online users. On click updates the sendCoordinates props.\r\n\trenderOnlineChildren = () => {\r\n\t\treturn this.props.users.filter(user => user.status == 1).sort((a, b) =>\r\n\t\t\tthis.distance(a.latitude,a.longitude, 48.305862, 14.286444, \"K\").toFixed(2) - this.distance(b.latitude,b.longitude, 48.305862, 14.286444, \"K\").toFixed(2)\r\n\t\t\t).map(user => {\r\n\t\t\t\treturn (\r\n\t\t\t\t<Collapsible transitionTime=\"200\" key={user.username} onOpen={() => {\r\n\t\t\t\t\tthis.props.sendCoordinates(user.latitude, user.longitude)\r\n\t\t\t\t\t} \r\n\t\t\t\t} onClose={() => {\r\n\t\t\t\t\tthis.props.sendCoordinates(user.latitude, user.longitude)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttrigger={`${user.username} - \r\n\t\t\t\t\tDistance: ${this.distance(user.latitude,user.longitude, 48.305862, 14.286444, \"K\").toFixed(2)} KM`}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\tLocation:\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\tLatitude - {user.latitude}\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\tLongitude - {user.longitude}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</Collapsible>\t\t\t\t\t\t\r\n\t\t\t);\r\n\t\t})\r\n\t}\r\n\t\r\n\t//Clickable list implemented as collapsible for the offline users. On click updates the sendCoordinates props.\r\n\trenderOfflineChildren = () => {\r\n\t\treturn this.props.users.filter(user => user.status == 0).sort((a, b) => a.username.localeCompare(b.username)).map(user => {\r\n\t\t\treturn (\r\n\t\t\t\t<Collapsible transitionTime=\"200\" key={user.username} onOpen={() => {\r\n\t\t\t\t\t\tthis.props.sendCoordinates(user.latitude, user.longitude)\r\n\t\t\t\t\t}\r\n\t\t\t\t} onClose = {() => {\r\n\t\t\t\t\t\tthis.props.sendCoordinates(user.latitude, user.longitude)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttrigger={`${user.username}`}>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\tLast seen at:\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\tLatitude - {user.latitude}\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\tLongitude - {user.longitude}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</Collapsible>\t\t\t\t\t\t\r\n\t\t\t);\r\n\t\t})\t\t\r\n\t}\r\n\t\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n\t\t\t<h5>Online Users</h5>\r\n\t\t\t<FlipMove>\r\n\t\t\t\t{this.renderOnlineChildren()}\r\n\t\t\t</FlipMove>\r\n\r\n\t\t\t<h5>Offline Users</h5>\r\n\t\t\t<FlipMove>\r\n                    {this.renderOfflineChildren()}\r\n\t\t\t</FlipMove>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport 'react-splitter-layout/lib/index.css';\r\n\r\nimport MapContainer from './Map';\r\nimport DynamicList from \"./DynamicList\";\r\n\r\nexport default class Interface extends React.Component {\r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n\t\tthis.getCoordinates = this.getCoordinates.bind(this)\r\n    }\r\n\t\r\n\t//There are two important states categories. \r\n\t//1. The Current User is the one who logged in.\r\n\t//2. The Pan categories tell where the maps should be centered after a list click\r\n\tstate = {\r\n\tcurrentUser: localStorage.getItem('user'),\r\n\tcurrentLat: localStorage.getItem('lat'),\r\n\tcurrentLng: localStorage.getItem('lng'),\r\n\tpanLat: localStorage.getItem('lat'),\r\n\tpanLng: localStorage.getItem('lng'),\r\n\tusers: []\r\n    };\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.setupBeforeUnloadListener();\r\n\t\t\r\n\t\t//Gets all registered users\r\n\t\taxios.get('http://localhost:3000/user/').then(response => {\r\n\t\t\tconsole.log(response.data);\r\n\t\t\tthis.setState({ users: response.data }); \r\n\t\t})\r\n\t\t\r\n\t\t//Sets the interval. This will do two actions:\r\n\t\t//1. Update the users state if there were changes in the Database\r\n\t\t//2. Send an update request in case the current user coordinates change\r\n\t\tthis.interval = setInterval(() =>{axios.get('http://localhost:3000/user/').then(response => {\r\n\t\t\tconsole.log(response.data);\r\n\t\t\t\r\n\t\t\t//Here is where the users state update takes place.\r\n\t\t\tif (!(JSON.stringify(this.state.users) === JSON.stringify(response.data))) this.setState({ users: response.data }); \r\n\t\t\t\r\n\t\t\t//Here is where the update request takes place.\r\n\t\t\tif (navigator && navigator.geolocation) {\r\n\t\t\t\tnavigator.geolocation.getCurrentPosition(pos => {\r\n\t\t\t\t\tif (pos.coords.latitude != this.state.currentLat || pos.coords.longitude != this.state.currentLng) {\r\n\t\t\t\t\t\taxios.post('http://localhost:3000/user/update/', {\r\n\t\t\t\t\t\t\tusername: this.state.currentUser,\r\n\t\t\t\t\t\t\tlongitude: pos.coords.longitude,\r\n\t\t\t\t\t\t\tlatitude: pos.coords.latitude,\r\n\t\t\t\t\t\t\tstatus: '1'\r\n\t\t\t\t\t\t  }).then(function (response) {  \r\n\t\t\t\t\t\t\t\tif(response.data == 'Update successful'){\r\n\t\t\t\t\t\t\t\t\tconsole.log('Location Updated');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(response.data == 'Update failed'){\r\n\t\t\t\t\t\t\t\t\tthrow \"Location update failed\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t  }).catch(error => { console.log(error); this.setState({ error: 'Error during location update' }) })\r\n\t\t\t\t\t  localStorage.setItem('lat', pos.coords.latitude);\r\n\t\t\t\t\t  localStorage.setItem('lng', pos.coords.longitude);\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\tcurrentLat: localStorage.getItem('lat'),\r\n\t\t\t\t\t\t\tcurrentLng: localStorage.getItem('lng')\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n                });\r\n\t\t\t}\r\n\t\t\t\r\n\t\t})}, 10000);\r\n\t}\r\n\t\r\n\t//Action when component unmounts\r\n\tcomponentWillUnmount() {\r\n\t  clearInterval(this.interval);\r\n\t  this.handleLogout();\r\n\t}\r\n\t\r\n\t//Logs current user out and clears the local storage\r\n\thandleLogout = event => {\r\n        event.preventDefault();\r\n  \r\n\t\taxios.post('http://localhost:3000/user/update/', {\r\n\t\t\tusername: this.state.currentUser,\r\n\t\t\tlongitude: this.state.currentLng,\r\n\t\t\tlatitude: this.state.currentLat,\r\n\t\t\tstatus: '0'\r\n\t\t\t  }).then(function (response) {  \r\n\t\t\t\tif(response.data == 'Update successful'){\r\n\t\t\t\t\twindow.location = '/';\r\n\t\t\t\t\tconsole.log('Logout Succesful');\r\n\t\t\t\t}\r\n\t\t\t\tif(response.data == 'Update failed'){\r\n\t\t\t\t\tthrow \"Logout failed\";\r\n\t\t\t\t}\r\n\t\t\t  }).catch(error => { console.log(error); this.setState({ error: 'Logout failed' }) })\r\n\t\tlocalStorage.clear();\r\n    }\r\n\t\r\n\t//Deletes the current user\r\n\thandleDelete = event => {\r\n        event.preventDefault();\r\n\t\t\taxios.delete('http://localhost:3000/user/' + this.state.currentUser).then(function (response) {  \r\n\t\t\t\t\t\tif(response.data == 'Deletion successful'){\r\n\t\t\t\t\t\t\twindow.location = '/';\r\n\t\t\t\t\t\t\tconsole.log('Deletion successful');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tthrow \"Deletion failed\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t  }).catch(error => { console.log(error); this.setState({ error: 'Deletion failed' }) })\r\n\t\t\tlocalStorage.clear();\r\n    }\r\n\t\r\n\t//Logs user out if tab is closed without logging out\r\n    doSomethingBeforeUnload = () => {\r\n        axios.post('http://localhost:3000/user/update/', {\r\n\t\t\tusername: this.state.currentUser,\r\n\t\t\tlongitude: this.state.currentLng,\r\n\t\t\tlatitude: this.state.currentLat,\r\n\t\t\tstatus: '0'\r\n\t\t\t  }).then(function (response) {  \r\n\t\t\t\tif(response.data == 'Update successful'){\r\n\t\t\t\t\twindow.location = '/';\r\n\t\t\t\t\tconsole.log('Logout Succesful');\r\n\t\t\t\t}\r\n\t\t\t\tif(response.data == 'Update failed'){\r\n\t\t\t\t\tthrow \"Logout failed\";\r\n\t\t\t\t}\r\n\t\t\t}).catch(error => { console.log(error); this.setState({ error: 'Logout failed' }) })\r\n\t\tlocalStorage.clear();\r\n    }\r\n\r\n    // Setup the `beforeunload` event listener\r\n    setupBeforeUnloadListener = () => {\r\n        window.addEventListener(\"beforeunload\", (ev) => {\r\n            ev.preventDefault();\r\n            return this.doSomethingBeforeUnload();\r\n        });\r\n    };\r\n\t\r\n\t//Gets pan coordinates from DynamicList \r\n\tgetCoordinates(lat, lng){\r\n\t\tthis.setState({\r\n\t\t\tpanLat: lat,\r\n\t\t\tpanLng: lng\r\n\t\t});\r\n\t}\r\n\t\r\n\trender() {\r\n        return (\r\n\t\t\t<div className=\"App\">\r\n                <h1>\r\n                    Dynamic List\r\n                </h1>\r\n\t\t\t\t<h4>Current User: {localStorage.getItem('user')}</h4>\r\n\t\t\t\t<button className='button' style={{margin: 20}} type=\"submit\" onClick={this.handleLogout}> Logout</button> \r\n\t\t\t\t<button className='button' style={{margin: 20}} type=\"submit\" onClick={this.handleDelete}> Delete Account</button>\r\n\t\t\t\t<SplitterLayout>\r\n\t\t\t\t<DynamicList users={this.state.users} sendCoordinates={this.getCoordinates}/>\r\n\t\t\t\t<MapContainer users={this.state.users} panLat={this.state.panLat} panLng={this.state.panLng}>\r\n\t\t\t\t</MapContainer>\r\n\t\t\t\t</SplitterLayout>\r\n\t\t\t</div>\t\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Login from \"./components/Login\";\r\nimport Interface from \"./components/Interface\";\r\nimport DynamicList from \"./components/DynamicList\";\r\nimport './components/css/style.css';\r\nimport './components/css/skeleton.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  \r\n  render() {\r\n    return (\r\n\t\t//Defines existing Routes. The initial screen is LogIn, which then links to Interface\r\n        <Router>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={Login}/>\r\n                <Route path=\"/map\" exact component={Interface}/>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}