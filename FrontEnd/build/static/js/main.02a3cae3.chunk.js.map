{"version":3,"sources":["components/UserService.js","components/Login.js","components/UserInput.js","components/location.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["USER_URL","axios","get","user","post","Login","React","Component","state","username","error","handleChange","event","setState","target","value","handleSubmit","preventDefault","fetch","then","response","json","responseJson","status","props","history","push","console","log","message","catch","className","this","type","name","onChange","onClick","mapStyles","position","width","height","CurrentLocation","initialCenter","lat","lng","currentLocation","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","loadMap","prevProps","prevState","google","recenterMap","maps","mapRef","refs","map","node","ReactDOM","findDOMNode","zoom","center","LatLng","mapConfig","Object","assign","Map","current","panTo","children","Children","c","cloneElement","mapCenter","style","ref","renderChildren","defaultProps","visible","MapContainer","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","onClose","GoogleApiWrapper","apiKey","App","path","exact","component","Boolean","window","location","hostname","match","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"iVAEMA,EAAW,6CAYF,M,2GARP,OAAOC,IAAMC,IAAIF,K,iCAGVG,GACP,OAAOF,IAAMG,KAAKJ,EAAS,OAAQG,O,MC4C5BE,GClDwBC,IAAMC,UDC7C,2MACIC,MAAQ,CACJC,SAAU,GACVC,MAAO,IAHf,EAKIC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAAEJ,SAAUG,EAAME,OAAOC,MAAOL,MAAO,MAN7D,EASIM,aAAe,SAAAJ,GACXA,EAAMK,iBACsB,KAAxB,EAAKT,MAAMC,SACX,EAAKI,SAAS,CACVH,MAAO,0BAIXQ,MAAM,0CAAD,OAA2C,EAAKV,MAAMC,WACtDU,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,YAAxBA,EAAaC,QACb,EAAKC,MAAMC,QAAQC,KAAK,QACxBC,QAAQC,IAAI,YAEZ,EAAKf,SAAS,CACVH,MAAOY,EAAaO,aAI/BC,OAAM,SAAApB,GAAWiB,QAAQC,IAAIlB,GAAQ,EAAKG,SAAS,CAAEH,MAAO,sBA7B7E,wEAiCQ,OACI,yBAAKqB,UAAU,QACX,wBAAIA,UAAU,QAAd,UACA,0BAAMA,UAAU,QACZ,uBAAGA,UAAU,QAAb,8BACA,2BAAOA,UAAU,QAAQhB,MAAOiB,KAAKxB,MAAMC,SAAUwB,KAAK,OAAOC,KAAK,OAAOC,SAAUH,KAAKrB,eAEnE,KAArBqB,KAAKxB,MAAME,MAAe,KAAO,yBAAKqB,UAAU,SAASC,KAAKxB,MAAME,OAExE,4BAAQqB,UAAU,SAASE,KAAK,SAASG,QAASJ,KAAKhB,cAAvD,eA1CpB,GAA2BV,IAAMC,Y,QEF3B8B,EACG,CACDC,SAAU,WACVC,MAAO,OACPC,OAAQ,QAGHC,EAAb,YACI,WAAYjB,GAAQ,IAAD,6BACf,4CAAMA,KAEoBA,MAAMkB,cAAxBC,EAHO,EAGPA,IAAKC,EAHE,EAGFA,IAHE,OAIf,EAAKpC,MAAQ,CACTqC,gBAAiB,CACbF,IAAKA,EACLC,IAAKA,IAPE,EADvB,iFAYyB,IAAD,OACZZ,KAAKR,MAAMsB,6BACPC,WAAaA,UAAUC,aACvBD,UAAUC,YAAYC,oBAAmB,SAAAC,GACrC,IAAMC,EAASD,EAAIC,OACnB,EAAKtC,SAAS,CACVgC,gBAAiB,CACbF,IAAKQ,EAAOC,SACZR,IAAKO,EAAOE,gBAMhCrB,KAAKsB,YA1Bb,yCA6BuBC,EAAWC,GACtBD,EAAUE,SAAWzB,KAAKR,MAAMiC,QAChCzB,KAAKsB,UAELE,EAAUX,kBAAoBb,KAAKxB,MAAMqC,iBACzCb,KAAK0B,gBAlCjB,gCAuCQ,GAAI1B,KAAKR,OAASQ,KAAKR,MAAMiC,OAAQ,KAG3BE,EADa3B,KAAKR,MAAhBiC,OACYE,KAEdC,EAAS5B,KAAK6B,KAAKC,IAGnBC,EAAOC,IAASC,YAAYL,GAE5BM,EAASlC,KAAKR,MAAd0C,KAV2B,EAWZlC,KAAKxB,MAAMqC,gBAAxBF,EAXyB,EAWzBA,IAAKC,EAXoB,EAWpBA,IACPuB,EAAS,IAAIR,EAAKS,OAAOzB,EAAKC,GAC9ByB,EAAYC,OAAOC,OACrB,GACA,CACIJ,OAAQA,EACRD,KAAMA,IAIdlC,KAAK8B,IAAM,IAAIH,EAAKa,IAAIT,EAAMM,MA5D1C,oCAiEQ,IAAMP,EAAM9B,KAAK8B,IACXW,EAAUzC,KAAKxB,MAAMqC,gBAGrBc,EADS3B,KAAKR,MAAMiC,OACNE,KAEpB,GAAIG,EAAK,CACL,IAAIK,EAAS,IAAIR,EAAKS,OAAOK,EAAQ9B,IAAK8B,EAAQ7B,KAClDkB,EAAIY,MAAMP,MAzEtB,uCA6EsB,IAAD,OACLQ,EAAa3C,KAAKR,MAAlBmD,SAER,GAAKA,EAEL,OAAOrE,IAAMsE,SAASd,IAAIa,GAAU,SAAAE,GAChC,GAAKA,EACL,OAAOvE,IAAMwE,aAAaD,EAAG,CACzBf,IAAK,EAAKA,IACVL,OAAQ,EAAKjC,MAAMiC,OACnBsB,UAAW,EAAKvE,MAAMqC,uBAvFtC,+BA6FQ,IAAMmC,EAAQV,OAAOC,OAAO,GAAIlC,GAEhC,OACI,6BACI,yBAAK2C,MAAOA,EAAOC,IAAI,OAAvB,kBAGCjD,KAAKkD,sBApGtB,GAAqC5E,IAAMC,WAyG5BkC,IAEfA,EAAgB0C,aAAe,CAC3BjB,KAAM,GACNxB,cAAe,CACXC,IAAK,UACLC,IAAK,WAETE,6BAA6B,EAC7BsC,SAAS,GCvHN,IAAMC,EAAb,2MACI7E,MAAQ,CACJ8E,mBAAmB,EACnBC,aAAc,GACdC,cAAe,IAJvB,EAOIC,cAAgB,SAACjE,EAAOkE,EAAQC,GAAhB,OACZ,EAAK9E,SAAS,CACV2E,cAAehE,EACf+D,aAAcG,EACdJ,mBAAmB,KAX/B,EAcIM,QAAU,SAAApE,GACF,EAAKhB,MAAM8E,mBACX,EAAKzE,SAAS,CACVyE,mBAAmB,EACnBC,aAAc,QAlB9B,wEAwBQ,OACI,yBAAKxD,UAAU,OACX,0CAGA,kBAAC,EAAD,CAAiBe,6BAA2B,EAACW,OAAQzB,KAAKR,MAAMiC,QAC5D,kBAAC,SAAD,CAAQrB,QAASJ,KAAKyD,cAAevD,KAAM,qBAC3C,kBAAC,aAAD,CACIwD,OAAQ1D,KAAKxB,MAAM+E,aACnBH,QAASpD,KAAKxB,MAAM8E,kBACpBM,QAAS5D,KAAK4D,SAEd,6BACI,4BAAK5D,KAAKxB,MAAMgF,cAActD,cArC1D,GAAkC3B,aA8CnBsF,6BAAiB,CAC5BC,OAAQ,2CADGD,CAEZR,GCjCYU,E,iLAVX,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW7F,IACjC,kBAAC,IAAD,CAAO2F,KAAK,OAAOC,OAAK,EAACC,UAAW1B,U,GAPlCjE,aCKE4F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNvC,IAASwC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmB3D,WACrBA,UAAU4D,cAAcC,MAAMzF,MAAK,SAAA0F,GACjCA,EAAaC,kB","file":"static/js/main.02a3cae3.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst USER_URL = 'http://localhost:3306/dynamicl_DynamicList'\n\nclass UserService {\n    retrieveAllUsers() {\n        return axios.get(USER_URL);\n    };\n\n    createUser(user) {\n        return axios.post(USER_URL+'/add', user)\n    }\n}\n\nexport default new UserService()\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport './style.css';\nimport UserInput from \"./UserInput\";\n\nexport class Login extends React.Component {\n    state = {\n        username: '',\n        error: ''\n    }\n    handleChange = event => {\n        this.setState({ username: event.target.value, error: '' });\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n        if (this.state.username === '') {\n            this.setState({\n                error: 'please enter username'\n            })\n        }\n        else {\n            fetch(`http://localhost:3306/adduser?username=${this.state.username}`)\n                .then(response => response.json())\n                .then(responseJson => {\n                    if (responseJson.status === 'success') {\n                        this.props.history.push('/map');\n                        console.log('success');\n                    } else {\n                        this.setState({\n                            error: responseJson.message\n                        })\n                    }\n                })\n                .catch(error => { console.log(error); this.setState({ error: 'Network error' }) })\n        }\n    }\n    render() {\n        return (\n            <div className=\"base\">\n                <h1 className='head'>Log In</h1>\n                <form className='form'>\n                    <p className='head'>Enter username to continue</p>\n                    <input className='input' value={this.state.username} type=\"text\" name=\"name\" onChange={this.handleChange} />\n                    {\n                        this.state.error === '' ? null : <div className='error'>{this.state.error}</div>\n                    }\n                    <button className='button' type=\"submit\" onClick={this.handleSubmit}>Login</button>\n                </form>\n            </div >\n        );\n    }\n}\n\nexport default Login\n","import React from 'react';\nimport UserService from \"./UserService\";\nimport { Link } from 'react-router-dom';\n\nexport default class UserInput extends React.Component {\n    state = {\n        username: '',\n    };\n\n    handleChange = event => {\n        this.setState({username: event.target.value});\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n        let user = {\n            username: this.state.username\n        }\n        UserService.createUser(user)\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label> User Name:\n                    <input type=\"text\" name=\"name\" onChange={this.handleChange}/>\n                </label>\n                <Link to=\"/map\">\n                    <button tpye=\"submit\">Login</button>\n                </Link>\n            </form>\n        )\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n    map: {\n        position: 'absolute',\n        width: '100%',\n        height: '100%'\n    }\n};\nexport class CurrentLocation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const { lat, lng } = this.props.initialCenter;\n        this.state = {\n            currentLocation: {\n                lat: lat,\n                lng: lng\n            }\n        };\n    }\n    componentDidMount() {\n        if (this.props.centerAroundCurrentLocation) {\n            if (navigator && navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(pos => {\n                    const coords = pos.coords;\n                    this.setState({\n                        currentLocation: {\n                            lat: coords.latitude,\n                            lng: coords.longitude\n                        }\n                    });\n                });\n            }\n        }\n        this.loadMap();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n    }\n\n    loadMap() {\n        if (this.props && this.props.google) {\n            // checks if google is available\n            const { google } = this.props;\n            const maps = google.maps;\n\n            const mapRef = this.refs.map;\n\n            // reference to the actual DOM element\n            const node = ReactDOM.findDOMNode(mapRef);\n\n            let { zoom } = this.props;\n            const { lat, lng } = this.state.currentLocation;\n            const center = new maps.LatLng(lat, lng);\n            const mapConfig = Object.assign(\n                {},\n                {\n                    center: center,\n                    zoom: zoom\n                }\n            );\n            // maps.Map() is constructor that instantiates the map\n            this.map = new maps.Map(node, mapConfig);\n        }\n    }\n\n    recenterMap() {\n        const map = this.map;\n        const current = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n            let center = new maps.LatLng(current.lat, current.lng);\n            map.panTo(center);\n        }\n    }\n\n    renderChildren() {\n        const { children } = this.props;\n\n        if (!children) return;\n\n        return React.Children.map(children, c => {\n            if (!c) return;\n            return React.cloneElement(c, {\n                map: this.map,\n                google: this.props.google,\n                mapCenter: this.state.currentLocation\n            });\n        });\n    }\n\n    render() {\n        const style = Object.assign({}, mapStyles.map);\n\n        return (\n            <div>\n                <div style={style} ref=\"map\">\n                    Loading map...\n                </div>\n                {this.renderChildren()}\n            </div>\n        );\n    }\n}\nexport default CurrentLocation;\n\nCurrentLocation.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n        lat: 48.305862,\n        lng: 14.286444\n    },\n    centerAroundCurrentLocation: false,\n    visible: true\n};\n","import React, { Component } from 'react';\nimport { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n\nimport CurrentLocation from './location';\n\nexport class MapContainer extends Component {\n    state = {\n        showingInfoWindow: false,\n        activeMarker: {},\n        selectedPlace: {}\n    };\n\n    onMarkerClick = (props, marker, e) =>\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n\n    onClose = props => {\n        if (this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>\n                    Map & List\n                </h1>\n                <CurrentLocation centerAroundCurrentLocation google={this.props.google}>\n                    <Marker onClick={this.onMarkerClick} name={'Current location'} />\n                    <InfoWindow\n                        marker={this.state.activeMarker}\n                        visible={this.state.showingInfoWindow}\n                        onClose={this.onClose}\n                    >\n                        <div>\n                            <h4>{this.state.selectedPlace.name}</h4>\n                        </div>\n                    </InfoWindow>\n                </CurrentLocation>\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyC2Rm-AAuZ_1tqw1yDcWcM05qGXtqN_jxo'\n})(MapContainer);\n","import React, {Component} from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Map from \"./components/Map\";\n\n\nclass App extends Component {\n    //Changesdkfjsdfgds\n  render() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/\" exact component={Login}/>\n                <Route path=\"/map\" exact component={Map}/>\n            </Switch>\n        </Router>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}